// <auto-generated />
using System;
using MRQ.CryptoBot.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MRQ.CryptoBot.Repository.Migrations
{
    [DbContext(typeof(SQLiteContext))]
    partial class SQLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChainType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractABI")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractRouterForSwap")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultGas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultGasPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SlippageTolerance")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeBetweenPriceUpdate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeBetweenWalletBalanceUpdate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeForPingConnectionWithInternet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeForPingConnectionWithWeb3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenDefaultContract")
                        .HasColumnType("TEXT");

                    b.Property<string>("Web3Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Moralis.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExchangeAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UsdPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Moralis.NativePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BalanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Decimals")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.ToTable("NativePrices");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.MoralisApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("MoralisApiKey");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Router", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoutersForSwapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SwapOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoutersForSwapId");

                    b.ToTable("Router");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.RoutersForSwap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("RoutersForSwap");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("BalanceWei")
                        .HasColumnType("TEXT");

                    b.Property<string>("Decimals")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Moralis.NativePrice", b =>
                {
                    b.HasOne("MRQ.CryptoBot.Domain.Entities.Moralis.Balance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.MoralisApiKey", b =>
                {
                    b.HasOne("MRQ.CryptoBot.Domain.Entities.Configuration", null)
                        .WithMany("MoralisApiKeys")
                        .HasForeignKey("ConfigurationId");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Router", b =>
                {
                    b.HasOne("MRQ.CryptoBot.Domain.Entities.RoutersForSwap", null)
                        .WithMany("Router")
                        .HasForeignKey("RoutersForSwapId");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.RoutersForSwap", b =>
                {
                    b.HasOne("MRQ.CryptoBot.Domain.Entities.Configuration", null)
                        .WithMany("RoutersForSwaps")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.Configuration", b =>
                {
                    b.Navigation("MoralisApiKeys");

                    b.Navigation("RoutersForSwaps");
                });

            modelBuilder.Entity("MRQ.CryptoBot.Domain.Entities.RoutersForSwap", b =>
                {
                    b.Navigation("Router");
                });
#pragma warning restore 612, 618
        }
    }
}
